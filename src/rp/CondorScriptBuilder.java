package rp;

import javax.swing.*;
import java.io.PrintStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;

/**
 * Created by IntelliJ IDEA.
 * User: spxrnp
 * Date: 29-Nov-2006
 * Time: 16:21:47
 * CondorScriptBuilder builds the condor submit script condor.sub
 * which is then executed by condor.bat which is created in
 * class GenInputFileListener
 */
public class CondorScriptBuilder {
    SignalDisplaySettings signalDisplaySettings;
    StringBuffer condorString;
    String filePath;
    String outputFilePath;
    String fileNames[];
    JList fileList;
    DisplayPanel displayPanel;
    int[] fileSize;
    String filetype;
    String outDir;
    String exe;

    CondorScriptBuilder(SignalDisplaySettings signalDisplaySettings) {
        this.signalDisplaySettings = signalDisplaySettings;
        filePath = signalDisplaySettings.getCatalogueFilePath();
        fileNames = signalDisplaySettings.getDataFileNames();
        displayPanel = signalDisplaySettings.getDisplayPanel();
        fileSize = signalDisplaySettings.getDataFileSizes();
        filetype = signalDisplaySettings.getFiletype();
        fileList = signalDisplaySettings.getDataFileJList();
        outputFilePath = signalDisplaySettings.getOutputDirSelector().getTextContents();
        outDir = signalDisplaySettings.getOutputDirSelector().getTextContents();
        exe = signalDisplaySettings.getExecutableSelector().getTextContents();


        condorString = new StringBuffer();

        condorString.append("# Condor submit script generated by signal display \n");
        condorString.append("# Created by Roger Philp  \n \n \n");
        condorString.append("universe   = vanilla  \n \n");
        condorString.append("#Transfer all files generated by job\n");
        condorString.append("transfer_files = ALWAYS \n \n");
        condorString.append("#Say we Never want to receive email about this job...\n");
        condorString.append("notification = Never \n \n");
        condorString.append("executable = ");
        condorString.append(exe);
        condorString.append("\n \n");
        condorString.append("environment = path=");
        condorString.append(outputFilePath);
        condorString.append("\n \n");
        condorString.append("#-------------------------------------------- \n  \n");


    }

    public void condorSubfileBuild(int index) {


        String firstFile;
        String secondFile;
        String filterNameAndPath;
        String condorErrFile = null;
        String condorOutFile = null;
        String nameListFiles;

        int iend = fileNames[index].indexOf(".");

        String stem = fileNames[index].substring(0, iend);

        createBatchFile(stem);

        nameListFiles = stem + ".nml";
        condorErrFile = stem + ".err";
        condorOutFile = stem + ".out";

        if (index == 0) {
            firstFile = "";
        } else {
            firstFile = fileNames[index - 1];
        }
        secondFile = fileNames[index];
        filterNameAndPath = signalDisplaySettings.getFilterSelector().getTextContents();

        createEntry(outputFilePath, filePath, nameListFiles, firstFile, secondFile, filterNameAndPath,
                condorOutFile, condorErrFile);

        try {
            PrintStream condorFile = new PrintStream(new FileOutputStream(outDir + "\\"
                    + stem + ".sub"));
            condorFile.println(condorString);
            condorFile.close();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }

        createCondorSubFile(stem);
        System.out.println("trying to exec " + outputFilePath + "\\" + stem + ".bat");
        GoodWindowsExec goodWindowsExec = new GoodWindowsExec(outputFilePath + "\\" + stem + ".bat");

    }

    public void createBatchFile(String batchFileName) {
        try {
            PrintStream batchFile = new PrintStream(new FileOutputStream(outDir + "\\" + batchFileName + ".bat"));
            batchFile.println("cd " + outDir);
            batchFile.println("cmd /C  \"" + "c:\\condor\\bin\\condor_submit " + outDir +
                    "\\" + batchFileName + ".sub" + "\"");
            batchFile.close();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }


    public void createCondorSubFile(String condorSubFileName) {
        try {
            PrintStream condorFile = new PrintStream(new FileOutputStream(outDir + "\\" + condorSubFileName + ".sub"));
            condorFile.println(condorString);
            condorFile.close();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
    }

    public void condorSubfileBuild(int minIndex, int maxIndex) {
        String firstFile;
        String secondFile;
        String filterNameAndPath;
        String condorErrFile = null;
        String condorOutFile = null;
        String nameListFiles;

        createBatchFile("condor");

        if (signalDisplaySettings.getSelectAllCheckBox().isSelected()) {
            minIndex = 0;
            maxIndex = fileNames.length - 1;
        }

        for (int i = minIndex; i <= maxIndex; i++) {
            int iend = fileNames[i].indexOf(".");
            nameListFiles = fileNames[i].substring(0, iend) + ".nml";
            condorErrFile = fileNames[i].substring(0, iend) + ".err";
            condorOutFile = fileNames[i].substring(0, iend) + ".out";
            if (i == 0) {
                firstFile = "";
            } else {
                firstFile = fileNames[i - 1];
            }
            secondFile = fileNames[i];
            filterNameAndPath = signalDisplaySettings.getFilterSelector().getTextContents();

            createEntry(outputFilePath, filePath, nameListFiles, firstFile, secondFile, filterNameAndPath,
                    condorOutFile, condorErrFile);
        }

        createCondorSubFile("condor");

    }


    public void createEntry(String outputFilePath, String filePath, String nameListFiles, String firstFile,
                            String secondFile, String filterNameAndPath, String condorOutFile,
                            String condorErrFile) {
        condorString.append("\n");
        condorString.append("Transfer_input_files = ");
        condorString.append(outputFilePath);
        condorString.append("\\");
        condorString.append(nameListFiles);
        condorString.append(", ");
        if (!firstFile.equals("")) {
            condorString.append(filePath);
            condorString.append("\\");
            condorString.append(firstFile);
            condorString.append(", ");
        }

        condorString.append(filePath);
        condorString.append("\\");
        condorString.append(secondFile);
        condorString.append(", ");
        condorString.append(filterNameAndPath);
        condorString.append("\n");
        condorString.append("Input = ");
        condorString.append(nameListFiles);
        condorString.append("\n");
        condorString.append("Output = ");
        condorString.append(condorOutFile);
        condorString.append("\n");
        condorString.append("Error = ");
        condorString.append(condorErrFile);
        condorString.append("\n");
        condorString.append("queue \n  \n");
        condorString.append("#-------------------------------------------- \n  \n");

    }
}
